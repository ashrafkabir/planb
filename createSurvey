const randomBytes = require('crypto').randomBytes;

const AWS = require('aws-sdk');

const ddb = new AWS.DynamoDB.DocumentClient();



exports.handler = (event, context, callback) => {
   

    

    // The body field of the event in a proxy integration is a raw string.
    // In order to extract meaningful values, we need to first parse this string
    // into an object. A more robust implementation might inspect the Content-Type
    // header first and use a different parsing strategy based on that value.
    const requestBody = JSON.parse(event.body);

const Class_Id  = requestBody.Class_Id;
const CreatedBy_User_Id  = requestBody.CreatedBy_User_Id;
const Questions  = requestBody.Questions;
const Survey_Desc  = requestBody.Survey_Desc;
const Survey_Due_By  = requestBody.Survey_Due_By;
const Survey_Expiry  = requestBody.Survey_Expiry;
const Survey_Id  = requestBody.Survey_Id;
const Survey_Start  = requestBody.Survey_Start;
const Survey_Title  = requestBody.Survey_Title;
const Survey_Type  = requestBody.Survey_Type;

 

    recordSurvey(Class_Id,
CreatedBy_User_Id,
Questions,
Survey_Desc,
Survey_Due_By,
Survey_Expiry,
Survey_Id,
Survey_Start,
Survey_Title,
Survey_Type).then(() => {
        // You can use the callback function to provide a return value from your Node.js
        // Lambda functions. The first parameter is used for failed invocations. The
        // second parameter specifies the result data of the invocation.

        // Because this Lambda function is called by an API Gateway proxy integration
        // the result object must use the following structure.
        callback(null, {
            statusCode: 201,
            body: JSON.stringify({
                Class_Id:Class_Id,
CreatedBy_User_Id:CreatedBy_User_Id,
Questions:Questions,
Survey_Desc:Survey_Desc,
Survey_Due_By:Survey_Due_By,
Survey_Expiry:Survey_Expiry,
Survey_Id:Survey_Id,
Survey_Start:Survey_Start,
Survey_Title:Survey_Title,
Survey_Type:Survey_Type
            }),
            headers: {
                'Access-Control-Allow-Origin': '*',
            },
        });
    }).catch((err) => {
        console.error(err);

        // If there is an error during processing, catch it and return
        // from the Lambda function successfully. Specify a 500 HTTP status
        // code and provide an error Student in the body. This will provide a
        // more meaningful error response to the end client.
        errorResponse(err.Student, context.awsRequestId, callback)
    });
};



function recordSurvey(Class_Id,
CreatedBy_User_Id,
Questions,
Survey_Desc,
Survey_Due_By,
Survey_Expiry,
Survey_Id,
Survey_Start,
Survey_Title,
Survey_Type) {
    return ddb.put({
        TableName: 'Survey',
        Item: {
           Class_Id:Class_Id,
CreatedBy_User_Id:CreatedBy_User_Id,
Questions:Questions,
Survey_Desc:Survey_Desc,
Survey_Due_By:Survey_Due_By,
Survey_Expiry:Survey_Expiry,
Survey_Id:Survey_Id,
Survey_Start:Survey_Start,
Survey_Title:Survey_Title,
Survey_Type:Survey_Type,
            Created_On: new Date().toISOString(),
        },
    }).promise();
}

function toUrlString(buffer) {
    return buffer.toString('base64')
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
}

function errorResponse(errorStudent, awsRequestId, callback) {
  callback(null, {
    statusCode: 500,
    body: JSON.stringify({
      Error: errorStudent,
      Reference: awsRequestId,
    }),
    headers: {
      'Access-Control-Allow-Origin': '*',
    },
  });
}
