const randomBytes = require('crypto').randomBytes;

const AWS = require('aws-sdk');

const ddb = new AWS.DynamoDB.DocumentClient();



exports.handler = (event, context, callback) => {
   

    

    // The body field of the event in a proxy integration is a raw string.
    // In order to extract meaningful values, we need to first parse this string
    // into an object. A more robust implementation might inspect the Content-Type
    // header first and use a different parsing strategy based on that value.
    const requestBody = JSON.parse(event.body);

const Author_Id  = requestBody.Author_Id;
const Class_Id  = requestBody.Class_Id;
const Event_Desc  = requestBody.Event_Desc;
const Event_From_Date  = requestBody.Event_From_Date;
const Event_Id  = requestBody.Event_Id;
const Event_Name  = requestBody.Event_Name;
const Event_Status  = requestBody.Event_Status;
const Event_To_Date  = requestBody.Event_To_Date;
const Event_Type  = requestBody.Event_Type;
const User_Id  = requestBody.User_Id;

 

    recordEvent(Author_Id,
Class_Id,
Event_Desc,
Event_From_Date,
Event_Id,
Event_Name,
Event_Status,
Event_To_Date,
Event_Type,
User_Id).then(() => {
        // You can use the callback function to provide a return value from your Node.js
        // Lambda functions. The first parameter is used for failed invocations. The
        // second parameter specifies the result data of the invocation.

        // Because this Lambda function is called by an API Gateway proxy integration
        // the result object must use the following structure.
        callback(null, {
            statusCode: 201,
            body: JSON.stringify({
                Author_Id:Author_Id,
Class_Id:Class_Id,
Event_Desc:Event_Desc,
Event_From_Date:Event_From_Date,
Event_Id:Event_Id,
Event_Name:Event_Name,
Event_Status:Event_Status,
Event_To_Date:Event_To_Date,
Event_Type:Event_Type,
User_Id:User_Id
            }),
            headers: {
                'Access-Control-Allow-Origin': '*',
            },
        });
    }).catch((err) => {
        console.error(err);

        // If there is an error during processing, catch it and return
        // from the Lambda function successfully. Specify a 500 HTTP status
        // code and provide an error message in the body. This will provide a
        // more meaningful error response to the end client.
        errorResponse(err.message, context.awsRequestId, callback)
    });
};



function recordEvent(Author_Id,
Class_Id,
Event_Desc,
Event_From_Date,
Event_Id,
Event_Name,
Event_Status,
Event_To_Date,
Event_Type,
User_Id) {
    return ddb.put({
        TableName: 'User',
        Item: {
           Author_Id:Author_Id,
Class_Id:Class_Id,
Event_Desc:Event_Desc,
Event_From_Date:Event_From_Date,
Event_Id:Event_Id,
Event_Name:Event_Name,
Event_Status:Event_Status,
Event_To_Date:Event_To_Date,
Event_Type:Event_Type,
User_Id:User_Id,
            Created_On: new Date().toISOString(),
        },
    }).promise();
}

function toUrlString(buffer) {
    return buffer.toString('base64')
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
}

function errorResponse(errorMessage, awsRequestId, callback) {
  callback(null, {
    statusCode: 500,
    body: JSON.stringify({
      Error: errorMessage,
      Reference: awsRequestId,
    }),
    headers: {
      'Access-Control-Allow-Origin': '*',
    },
  });
}
